# =====================================
# 📘 RECURSION NOTES - Python Examples
# =====================================

# -------------------------------
# 🔁 Factorial Example
# -------------------------------
def factorial(n):
    if n == 0:  # Base case
        return 1
    else:       # Recursive case
        return n * factorial(n - 1)

print("Factorial of 5:", factorial(5))  # Output: 120


# -------------------------------
# 🧮 Fibonacci Example
# -------------------------------
def fibonacci(n):
    if n <= 1:  # Base case
        return n
    else:       # Recursive case
        return fibonacci(n - 1) + fibonacci(n - 2)

print("Fibonacci of 6:", fibonacci(6))  # Output: 8


# -------------------------------
# 🔢 Sum of Array
# -------------------------------
def sum_array(arr, n):
    if n == 0:  # Base case
        return arr[0]
    else:       # Recursive case
        return arr[n] + sum_array(arr, n - 1)

nums = [1, 2, 3, 4, 5]
print("Sum of array:", sum_array(nums, len(nums) - 1))  # Output: 15


# -------------------------------
# 🔁 Reverse String
# -------------------------------
def reverse_string(s):
    if len(s) == 0:  # Base case
        return s
    else:            # Recursive case
        return s[-1] + reverse_string(s[:-1])

print("Reversed string:", reverse_string("hello"))  # Output: 'olleh'


# -------------------------------
# 🧠 Power Function (x^n)
# -------------------------------
def power(x, n):
    if n == 0:
        return 1
    else:
        return x * power(x, n - 1)

print("2^4 =", power(2, 4))  # Output: 16


# =====================================
# 📝 Notes (as comments for reference)
# =====================================

# Base Case: The condition under which recursion stops.
# Recursive Case: The part where the function calls itself with a simpler input.

# TYPES OF RECURSION:
# - Tail Recursion: return recursive_call() at the end
# - Head Recursion: recursive_call() happens before computation
# - Tree Recursion: multiple recursive calls per step
# - Indirect Recursion: Function A calls B, B calls A

# ⚠️ Always ensure recursion reaches the base case to avoid infinite loops.
# 🕒 Watch for stack overflow if recursion depth is too large (Python default ~1000).